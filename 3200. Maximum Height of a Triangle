class Solution:
    def maxHeightOfTriangle(self, red: int, blue: int) -> int:
        # WARNING!!
        # needs balls to solve 
        # blue ball is bound to happen so get ready
        
        def check(red, blue):   # function to check the triangle
            
            ud_row = 0      # ud_rows up to down
            color = 0       # the current color red or blue
            lr_row = 1      # current ud_row left to right

            while red > 0 or blue > 0:  # if red or blue is lower than 0 the loop ends

                if color == 0:          # first red color 
                    if red >= lr_row:   # if red balls number is bigger than the requierd balls 
                                        # in the current ud_row left to right

                        red -= lr_row   # the the rquierd balls are removed from total red balls 
                        ud_row += 1     # +1 of the up to down ud_row
                    else:
                        return ud_row       # if the requierds balls are lacking the red balls
                                            # the on going ud_row (up to down) is returned

                else:   # second red color
                    if blue >= lr_row: # same as the previous one except with blue ball
                        blue -= lr_row
                        ud_row += 1
                    else:
                        return ud_row

                color ^= 1     # uses X-Or that fips 0 to 1 and 1 to 0
                lr_row += 1    # increments the left to right ud_row
            
            return ud_row   # final up down row 

        # on first function call red balls are on top so in check first red is passed and then blue
        # second on puts blue balls on top and red as next one
        # finaly who ever has the largets up down row triangle is returend

        return max(check(red, blue), check(blue, red)) 

            
